<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Spring.Messaging.Amqp.Rabbit</name>
    </assembly>
    <members>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter">
            <summary>
            Message listener adapter that delegates the handling of messages to target
            listener methods via reflection, with flexible message type conversion.
            Allows listener methods to operate on message content types, completely
            independent from the Rabbit API.
            </summary>
            <remarks>
            <para>By default, the content of incoming messages gets extracted before
            being passed into the target listener method, to let the target method
            operate on message content types such as String or byte array instead of
            the raw Message. Message type conversion is delegated to a Spring
            <see cref="T:Spring.Messaging.Amqp.Support.Converter.IMessageConverter"/>. By default, a <see cref="T:Spring.Messaging.Amqp.Support.Converter.SimpleMessageConverter"/>
            will be used. (If you do not want such automatic message conversion taking
            place, then be sure to set the <see cref="P:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter.MessageConverter"/> property
            to <code>null</code>.)
            </para>
            <para>If a target listener method returns a non-null object (typically of a
            message content type such as <code>String</code> or byte array), it will get
            wrapped in a Rabbit <code>Message</code> and sent to the exchange of the incoming message
            with the routing key that comes from the Rabbit ReplyTo property if available or via the 
            <see cref="P:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter.DefaultResponseRoutingKey"/> property.
            </para>
            <para>
            The sending of response messages is only available when
            using the <see cref="T:Spring.Messaging.Amqp.Rabbit.Core.IChannelAwareMessageListener"/> entry point (typically through a
            Spring message listener container). Usage as a MessageListener
            does <i>not</i> support the generation of response messages.
            </para>
            <para>Consult the reference documentation for examples of method signatures compliant with this
            adapter class.
            </para>
            </remarks>
            <author>Mark Pollack</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Core.IChannelAwareMessageListener">
            <summary>
             
            </summary>
            <author>Mark Pollack</author>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter.ORIGINAL_DEFAULT_HANDLER_METHOD">
            <summary>
            The default handler method name.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter"/> class with default settings.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter"/> class for the given handler object
            </summary>
            <param name="handlerObject">The delegate object.</param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter.OnMessage(Spring.Messaging.Amqp.Core.Message)">
            <summary>
            Rabbit <see cref="T:Spring.Messaging.Amqp.Core.IMessageListener"/> entry point.
            <para>Delegates the message to the target listener method, with appropriate
            conversion of the message arguments
            </para>
            </summary>
            <remarks>
            In case of an exception, the <see cref="M:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter.HandleListenerException(System.Exception)"/> method will be invoked.
            <b>Note</b> 
            Does not support sending response messages based on
            result objects returned from listener methods. Use the
            <see cref="T:Spring.Messaging.Amqp.Rabbit.Core.IChannelAwareMessageListener"/> entry point (typically through a Spring
            message listener container) for handling result objects as well.
            </remarks>
            <param name="message">The incoming message.</param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter.OnMessage(Spring.Messaging.Amqp.Core.Message,RabbitMQ.Client.IModel)">
            <summary>
            Spring <see cref="T:Spring.Messaging.Amqp.Rabbit.Core.IChannelAwareMessageListener"/> entry point.
            <para>
            Delegates the message to the target listener method, with appropriate
            conversion of the message argument. If the target method returns a
            non-null object, wrap in a Rabbit message and send it back.
            </para>
            </summary>
            <param name="message">The incoming message.</param>
            <param name="channel">The channel to operate on.</param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter.InitDefaultStrategies">
            <summary>
            Initialize the default implementations for the adapter's strategies.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter.HandleListenerException(System.Exception)">
            <summary>
            Handle the given exception that arose during listener execution.
            The default implementation logs the exception at error level.
            <para>This method only applies when used with <see cref="T:Spring.Messaging.Amqp.Core.IMessageListener"/>.
            In case of the Spring <see cref="T:Spring.Messaging.Amqp.Rabbit.Core.IChannelAwareMessageListener"/> mechanism,
            exceptions get handled by the caller instead.
            </para>
            </summary>
            <param name="ex">The exception to handle.</param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter.ExtractMessage(Spring.Messaging.Amqp.Core.Message)">
            <summary>
            Extract the message body from the given message.
            </summary>
            <param name="message">The message.</param>
            <returns>the content of the message, to be passed into the
            listener method as argument</returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter.GetHandlerMethodName(Spring.Messaging.Amqp.Core.Message,System.Object)">
            <summary>
            Gets the name of the listener method that is supposed to
            handle the given message.
            The default implementation simply returns the configured
            default listener method, if any.
            </summary>
            <param name="originalMessage">The EMS request message.</param>
            <param name="extractedMessage">The converted Rabbit request message,
            to be passed into the listener method as argument.</param>
            <returns>the name of the listener method (never <code>null</code>)</returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter.HandleResult(System.Object,Spring.Messaging.Amqp.Core.Message,RabbitMQ.Client.IModel)">
            <summary>
            Handles the given result object returned from the listener method, sending a response message back. 
            </summary>
            <param name="result">The result object to handle (never <code>null</code>).</param>
            <param name="request">The original request message.</param>
            <param name="channel">The channel to operate on (may be <code>null</code>).</param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter.BuildMessage(RabbitMQ.Client.IModel,System.Object)">
            <summary>
            Builds a Rabbit message to be sent as response based on the given result object.
            </summary>
            <param name="channel">The Rabbit Channel to operate on.</param>
            <param name="result">The content of the message, as returned from the listener method.</param>
            <returns>the Rabbit <code>Message</code> (never <code>null</code>)</returns>
            <exception cref="T:Spring.Messaging.Amqp.Support.Converter.MessageConversionException">If there was an error in message conversion</exception>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter.PostProcessResponse(Spring.Messaging.Amqp.Core.Message,Spring.Messaging.Amqp.Core.Message)">
            <summary>
            Post-process the given response message before it will be sent. The default implementation
            sets the response's correlation id to the request message's correlation id.
            </summary>
            <param name="request">The original incoming message.</param>
            <param name="response">The outgoing Rabbit message about to be sent.</param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter.GetResponseReplyTo(Spring.Messaging.Amqp.Core.Message,Spring.Messaging.Amqp.Core.Message,RabbitMQ.Client.IModel)">
            <summary>
            Determine a response destination for the given message.
            </summary>
            <remarks>
            <para>The default implementation first checks the Rabbit ReplyTo
            property of the supplied request; if that is not <code>null</code>
            it is returned; if it is <code>null</code>, then the configured
            <see cref="P:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter.DefaultResponseRoutingKey"/> default response routing key}
            is returned; if this too is <code>null</code>, then an
            <see cref="T:System.InvalidOperationException"/>is thrown.
            </para>
            </remarks>
            <param name="request">The original incoming message.</param>
            <param name="response">Tthe outgoing message about to be sent.</param>
            <param name="channel">The channel to operate on.</param>
            <returns>the response destination (never <code>null</code>)</returns>
            <exception cref="T:System.InvalidOperationException">if no destination can be determined.</exception>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter.SendResponse(RabbitMQ.Client.IModel,System.String,Spring.Messaging.Amqp.Core.Message)">
            <summary>
            Sends the given response message to the given destination.
            </summary>
            <param name="channel">The channel to operate on.</param>
            <param name="replyTo">The replyto property to determine where to send a response.</param>
            <param name="message">The outgoing message about to be sent.</param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter.PostProcessChannel(RabbitMQ.Client.IModel,Spring.Messaging.Amqp.Core.Message)">
            <summary>
            Post-process the given message producer before using it to send the response.
            The default implementation is empty.
            </summary>
            <param name="channel">The channel that will be used to send the message.</param>
            <param name="response">The outgoing message about to be sent.</param>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter.HandlerObject">
            <summary>
            Gets or sets the handler object to delegate message listening to.
            </summary>
            <remarks>
            Specified listener methods have to be present on this target object.
            If no explicit handler object has been specified, listener
            methods are expected to present on this adapter instance, that is,
            on a custom subclass of this adapter, defining listener methods.
            </remarks>
            <value>The handler object.</value>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter.DefaultHandlerMethod">
            <summary>
            Gets or sets the default handler method to delegate to,
            for the case where no specific listener method has been determined.
            Out-of-the-box value is <see cref="F:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter.ORIGINAL_DEFAULT_HANDLER_METHOD"/> ("HandleMessage"}.
            </summary>
            <value>The default handler method.</value>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter.DefaultResponseRoutingKey">
            <summary>
            Sets the default routing key to use when sending response messages. This will be applied
            in case of a request message that does not carry a "ReplyTo" property.
            Response destinations are only relevant for listener methods that return
            result objects, which will be wrapped in a response message and sent to a
            response destination.
            </summary>
            <value>The default ReplyTo value.</value>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter.MessageConverter">
            <summary>
            Gets or sets the message converter that will convert incoming Rabbit messages to
            listener method arguments, and objects returned from listener
            methods back to Rabbit messages.
            </summary>
            <remarks>
            <para>The default converter is a {@link SimpleMessageConverter}, which is able
            to handle Byte arrays and strings.
            </para>
            </remarks>
            <value>The message converter.</value>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.DestinationNameHolder">
            <summary>
            Internal class combining a destination name and its target destination type (queue or topic).
            </summary>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Core.IChannelCallback`1">
            <summary>
             
            </summary>
            <author>Mark Pollack</author>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Connection.IDecoratorModel">
            <summary>
            Subinterface of Model to be implemented by
            implementations that wrap a Model to provide added 
            functionality. Allows access to the the underlying target Model.
            </summary>
            <author>Mark Pollack</author>
            <see cref="M:Spring.Messaging.Amqp.Rabbit.Connection.ConnectionFactoryUtils.GetTargetModel(RabbitMQ.Client.IModel)"/>
            <see cref="T:Spring.Messaging.Amqp.Rabbit.Connection.CachingConnectionFactory"/>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Connection.IDecoratorModel.TargetModel">
            <summary>
            Gets the target model of the decorator.
            This will typically be the native provider IModel or a wrapper from a model pool.
            </summary>
            <value>The underlying model, never null</value>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Connection.ConnectionFactoryUtils">
            <summary>
             
            </summary>
            <author>Mark Pollack</author>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.ConnectionFactoryUtils.GetTargetModel(RabbitMQ.Client.IModel)">
            <summary>
            Return the innermost target IModel of the given IModel. If the given
            IModel is a decorated model, it will be unwrapped until a non-decorated
            IModel is found. Otherwise, the passed-in IModel will be returned as-is.
            </summary>
            <param name="model">The model to unwrap</param>
            <returns>The innermost target IModel, or the passed-in one if no decorator</returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.ConnectionFactoryUtils.GetTargetConnection(RabbitMQ.Client.IConnection)">
            <summary>
            Return the innermost target IConnection of the given IConnection. If the given
            IConnection is a decorated connection, it will be unwrapped until a non-decorated
            IConnection is found. Otherwise, the passed-in IConnection will be returned as-is.
            </summary>
            <param name="model">The connection to unwrap</param>
            <returns>The innermost target IConnection, or the passed-in one if no decorator</returns>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Connection.CloseSuppressingConnection">
            <summary>
             
            </summary>
            <author>Mark Pollack</author>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Connection.IDecoratorConnection">
            <summary>
            Subinterface of Connection to be implemented by
            implementations that wrap an Connection to provide added 
            functionality. Allows access to the the underlying target Connection.
            </summary>
            <author>Mark Pollack</author>
            <see cref="M:Spring.Messaging.Amqp.Rabbit.Connection.ConnectionFactoryUtils.GetTargetConnection(RabbitMQ.Client.IConnection)"/>
            <see cref="T:Spring.Messaging.Amqp.Rabbit.Connection.CachingConnectionFactory"/>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Connection.IDecoratorConnection.TargetConnection">
            <summary>
            Gets the target connection of the decorator.
            This will typically be the native provider IConnection or a wrapper from a model pool.
            </summary>
            <value>The underlying connection, never null</value>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer">
            <summary>
             
            </summary>
            <author>Mark Pollack</author>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Listener.AbstractRabbitListeningContainer">
            <summary>
            
            </summary>
            <author>Mark Pollack</author>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Core.RabbitAccessor">
            <summary>
             
            </summary>
            <author>Mark Pollack</author>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.AbstractRabbitListeningContainer.ValidateConfiguration">
            <summary>
            Validates the configuration of this container
            </summary>
            <notes>
            The default implementation is empty.  To be overridden in subclasses.
            </notes>
            <see cref="M:Spring.Messaging.Amqp.Rabbit.Listener.AbstractRabbitListeningContainer.Shutdown"/>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.AbstractRabbitListeningContainer.Initialize">
            <summary>
            Initializes this container.  Creates and calls a Rabbit Connection and 
            calls <see cref="M:Spring.Messaging.Amqp.Rabbit.Listener.AbstractRabbitListeningContainer.DoInitialize"/>.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.AbstractRabbitListeningContainer.Shutdown">
            <summary>
            Stop the shared Connection, call <see cref="M:Spring.Messaging.Amqp.Rabbit.Listener.AbstractRabbitListeningContainer.DoShutdown"/> and close
            this container
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.AbstractRabbitListeningContainer.Start">
            <summary>
            Starts this container.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.AbstractRabbitListeningContainer.DoStart">
            <summary>
            Start the shared Connection, if any, and notify all invoker tasks.
            </summary>
            <see cref="M:Spring.Messaging.Amqp.Rabbit.Listener.AbstractRabbitListeningContainer.EstablishSharedConnection"/>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.AbstractRabbitListeningContainer.Stop">
            <summary>
            Stop this container.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.AbstractRabbitListeningContainer.DoStop">
            <summary>
            Notify all invoker tasks and stop the shared Connection, if any.
            </summary>
            <see cref="M:Spring.Messaging.Amqp.Rabbit.Listener.AbstractRabbitListeningContainer.StopSharedConnection"/>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.AbstractRabbitListeningContainer.RunningAllowed">
            <summary>
            Check whether this container's listeners are generally allowed to run.
            This implementation always returns true; the default 'running' state is 
            purely determined by <see cref="M:Spring.Messaging.Amqp.Rabbit.Listener.AbstractRabbitListeningContainer.Start"/> / <see cref="M:Spring.Messaging.Amqp.Rabbit.Listener.AbstractRabbitListeningContainer.Stop"/>.
            </summary>
            <remarks>Subclasses may override this method to check against temporary 
            conditions that prevent listeners from actually running. In other words, 
            they may apply further restrictions to the 'running' state, returning 
            false if such a restriction prevents listeners from running.
            </remarks>
            <returns>true if running is allowed, false otherise</returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.AbstractRabbitListeningContainer.EstablishSharedConnection">
            <summary>
            Establishes the shared connection for this container.
            </summary>
            <remarks>The default implementation delegates to <see cref="M:Spring.Messaging.Amqp.Rabbit.Listener.AbstractRabbitListeningContainer.CreateSharedConnection"/>
            which does one immediate connection attempt and throws an exception if it fails.
            Can be overridden to have a recover process in place, retrying until a Connection can
            be successfully established.
            </remarks>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.AbstractRabbitListeningContainer.CreateSharedConnection">
            <summary>
            Creates the shared connection for this container.
            </summary>
            <remarks>The default implementation creates a standard Connection and prepares it
            through <see cref="M:Spring.Messaging.Amqp.Rabbit.Listener.AbstractRabbitListeningContainer.PrepareSharedConnection(RabbitMQ.Client.IConnection)"/>.
            </remarks>
            <returns>The prepared Connection</returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.AbstractRabbitListeningContainer.PrepareSharedConnection(RabbitMQ.Client.IConnection)">
            <summary>
            Prepares the given connection, which is about to be registered as the
            shared connection for this container.
            </summary>
            <remarks>Subclasses can override this to apply further settings.
            </remarks>
            <param name="connection">The connection to prepare.</param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.AbstractRabbitListeningContainer.StopSharedConnection">
            <summary>
            Stops the shared connection.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.AbstractRabbitListeningContainer.DoInitialize">
            <summary>
            Registers any invokers within this container.  Subclasses
            need to implement this method for their specific invoker management
            process.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.AbstractRabbitListeningContainer.DoShutdown">
            <summary>
            Close the registered invokers.  Subclasses need to implement this method for
            their specific invoker management process.
            </summary>
            <remarks>A shared Rabbit connection, if any, will automatically be closed afterwards.
            </remarks>
            <see cref="M:Spring.Messaging.Amqp.Rabbit.Listener.AbstractRabbitListeningContainer.Shutdown"/>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Listener.AbstractRabbitListeningContainer.ObjectName">
            <summary>
            Set the name of the object in the object factory that created this object.
            </summary>
            <value>The name of the object in the factory.</value>
            <remarks>
            	<p>
            Invoked after population of normal object properties but before an init
            callback like <see cref="T:Spring.Objects.Factory.IInitializingObject"/>'s
            <see cref="M:Spring.Objects.Factory.IInitializingObject.AfterPropertiesSet"/>
            method or a custom init-method.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Listener.AbstractRabbitListeningContainer.IsActive">
            <summary>
            Gets a value indicating whether this container is currently active, that is
            whether it has been set up but not shut down yet.
            </summary>
            <value><c>true</c> if this instance is active; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Listener.AbstractRabbitListeningContainer.Running">
            <summary>
            Gets a value indicating whether this container is currently running, that is,
            whether it has been started and not stopped yet.
            </summary>
            <value><c>true</c> if running; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Listener.AbstractRabbitListeningContainer.SharedConnectionEnabled">
            <summary>
            Gets a value indicating whether a shared Rabbited connection should be maintained 
            by this container base class
            </summary>
            <value>
            	<c>true</c> if shared connection enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.CheckMessageListener(System.Object)">
            <summary>
            Checks the message listener, throwing an exception
            if it does not correspond to a supported listener type.
            By default, only a <see cref="T:Spring.Messaging.Amqp.Core.IMessageListener"/> object or a
            Spring <see cref="T:Spring.Messaging.Amqp.Rabbit.Core.IChannelAwareMessageListener"/> object will be accepted.
            </summary>
            <param name="messageListener">The message listener.</param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.InvokeErrorHandler(System.Exception)">
            <summary>
            Invokes the error handler.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.ExecuteListener(RabbitMQ.Client.IModel,Spring.Messaging.Amqp.Core.Message)">
            <summary>
            Executes the specified listener,
            committing or rolling back the transaction afterwards (if necessary).
            </summary>
            <param name="channel">The channel.</param>
            <param name="message">The received message.</param>
            <see cref="M:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.InvokeListener(RabbitMQ.Client.IModel,Spring.Messaging.Amqp.Core.Message)"/>
            <see cref="M:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.CommitIfNecessary(RabbitMQ.Client.IModel,Spring.Messaging.Amqp.Core.Message)"/>
            <see cref="M:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.RollbackOnExceptionIfNecessary(RabbitMQ.Client.IModel,System.Exception)"/>
            <see cref="M:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.HandleListenerException(System.Exception)"/>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.DoExecuteListener(RabbitMQ.Client.IModel,Spring.Messaging.Amqp.Core.Message)">
            <summary>
            Executes the specified listener, 
            committing or rolling back the transaction afterwards (if necessary).
            </summary>
            <param name="session">The session to operate on.</param>
            <param name="message">The received message.</param>
            <exception cref="!:NMSException">If thrown by NMS API methods.</exception>
            <see cref="M:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.InvokeListener(RabbitMQ.Client.IModel,Spring.Messaging.Amqp.Core.Message)"/>
            <see cref="M:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.CommitIfNecessary(RabbitMQ.Client.IModel,Spring.Messaging.Amqp.Core.Message)"/>
            <see cref="M:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.RollbackOnExceptionIfNecessary(RabbitMQ.Client.IModel,System.Exception)"/>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.InvokeListener(RabbitMQ.Client.IModel,Spring.Messaging.Amqp.Core.Message)">
            <summary>
            Invokes the specified listener: either as standard NMS MessageListener
            or (preferably) as Spring SessionAwareMessageListener.
            </summary>
            <param name="session">The session to operate on.</param>
            <param name="message">The received message.</param>
            <see cref="P:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.MessageListener"/>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.DoInvokeListener(Spring.Messaging.Amqp.Rabbit.Core.IChannelAwareMessageListener,RabbitMQ.Client.IModel,Spring.Messaging.Amqp.Core.Message)">
            <summary>
            Invoke the specified listener as Spring SessionAwareMessageListener,
            exposing a new Rabbit Channel (potentially with its own transaction)
            to the listener if demanded.
            </summary>
            <param name="listener">The Spring ISessionAwareMessageListener to invoke.</param>
            <param name="channel">The channel to operate on.</param>
            <param name="message">The received message.</param>
            <see cref="T:Spring.Messaging.Amqp.Rabbit.Core.IChannelAwareMessageListener"/>
            <see cref="P:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.ExposeListenerChannel"/>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.DoInvokeListener(Spring.Messaging.Amqp.Core.IMessageListener,Spring.Messaging.Amqp.Core.Message)">
            <summary>
            Invoke the specified listener a Spring Rabbit MessageListener.
            </summary>
            <remarks>Default implementation performs a plain invocation of the
            <code>OnMessage</code> methods</remarks>
            <param name="listener">The listener to invoke.</param>
            <param name="message">The received message.</param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.CommitIfNecessary(RabbitMQ.Client.IModel,Spring.Messaging.Amqp.Core.Message)">
            <summary>
            Perform a commit or message acknowledgement, as appropriate
            </summary>
            <param name="channel">The channel to commit.</param>
            <param name="message">The message to acknowledge.</param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.RollbackIfNecessary(RabbitMQ.Client.IModel)">
            <summary>
            Perform a rollback, if appropriate.
            </summary>
            <param name="session">The session to rollback.</param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.RollbackOnExceptionIfNecessary(RabbitMQ.Client.IModel,System.Exception)">
            <summary>
            Perform a rollback, handling rollback excepitons properly.
            </summary>
            <param name="channel">The channel to rollback.</param>
            <param name="ex">The thrown application exception.</param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.IsChannelLocallyTransacted(RabbitMQ.Client.IModel)">
            <summary>
            Determines whether the given Channel is locally transacted, that is, whether
            its transaction is managed by this listener container's Channel handling
            and not by an external transaction coordinator.
            </summary>
            <remarks>
            This method is about finding out whether the Channel's transaction
            is local or externally coordinated.
            </remarks>
            <param name="channel">The channel to check.</param>
            <returns>
            	<c>true</c> if the is channel locally transacted; otherwise, <c>false</c>.
            </returns>
            <see cref="P:Spring.Messaging.Amqp.Rabbit.Core.RabbitAccessor.ChannelTransacted"/>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.HandleListenerException(System.Exception)">
            <summary>
            Handle the given exception that arose during listener execution.
            </summary>
            <remarks>
            The default implementation logs the exception at error level,
            not propagating it to the Rabbit provider - assuming that all handling of
            acknowledgement and/or transactions is done by this listener container.
            This can be overridden in subclasses.
            </remarks>
            <param name="ex">The exception to handle</param>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.Queue">
            <summary>
            Gets or sets the name of the queue to receive messages from
            </summary>
            <value>The name of the queue. Can not be null.</value>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.ExposeListenerChannel">
            <summary>
            Exposes the listener channel to a registered 
            <see cref="T:Spring.Messaging.Amqp.Rabbit.Core.IChannelAwareMessageListener"/> as well as to 
            <see cref="T:Spring.Messaging.Amqp.Rabbit.Core.RabbitTemplate"/> calls.
            Default is true, reusing the listener's <see cref="T:RabbitMQ.Client.IModel"/>
            </summary>
            <remarks>Turn this off to expose a fresh Rabbit Channel fetched from the
            same underlying Rabbit <see cref="T:RabbitMQ.Client.IConnection"/> instead.  Note that 
            Channels managed by an external transaction manager will always get
            exposed to <see cref="T:Spring.Messaging.Amqp.Rabbit.Core.RabbitTemplate"/>
            calls.  So interms of RabbitTemplate exposure, this setting only affects locally
            transacted Channels.
            </remarks>
            <value>
            	<c>true</c> if expose listener channel; otherwise, <c>false</c>.
            </value>
            <see cref="T:Spring.Messaging.Amqp.Rabbit.Core.IChannelAwareMessageListener"/>.
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.MessageListener">
            <summary>
            Sets the message listener to register with the container.  This
            can be either a Spring <see cref="T:Spring.Messaging.Amqp.Core.IMessageListener"/> object or
            a Spring <see cref="T:Spring.Messaging.Amqp.Rabbit.Core.IChannelAwareMessageListener"/> object.
            </summary>
            <value>The message listener.</value>
            <exception cref="T:System.ArgumentException">If the supplied listener</exception>
            is not a 
            <see cref="T:Spring.Messaging.Amqp.Core.IMessageListener"/>
             or 
            <see cref="T:Spring.Messaging.Amqp.Rabbit.Core.IChannelAwareMessageListener"/>
            <see cref="T:Spring.Messaging.Amqp.Core.IMessageListener"/>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.ErrorHandler">
            <summary>
            Sets an ErrorHandler to be invoked in case of any uncaught exceptions thrown
            while processing a Message. By default there will be no ErrorHandler
            so that error-level logging is the only result.
            </summary>
            <value>The error handler.</value>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Listener.MessageRejectedWhileStoppingException">
            <summary>
            Internal exception class that indicates a rejected message on shutdown.
            Used to trigger a rollback for an external transaction manager in that case.
            </summary>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Core.MessageCreatorDelegate">
            <summary>
            Strategy interface for creating AMQP messages.
            </summary>
            <author>Mark Pollack</author> 
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Core.IRabbitOperations">
            <summary>
            Rabbit specific methods for AMQP functionality.
            </summary>
            <author>Mark Pollack</author>
            <author>Mark Fisher</author>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Connection.SingleConnectionFactory">
            <summary>
            A <see cref="T:Spring.Messaging.Amqp.Rabbit.Connection.IConnectionFactory"/> implementation that returns the same Connection from all
            <see cref="M:Spring.Messaging.Amqp.Rabbit.Connection.IConnectionFactory.CreateConnection"/> calls, and ignores call to 
            <see cref="M:RabbitMQ.Client.IConnection.Close"/>
            </summary>
            <author>Mark Pollack</author>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Connection.IConnectionFactory">
            <summary>
            An interface based ConnectionFactory for creating <see cref="T:RabbitMQ.Client.IConnection"/>s.
            </summary>
            <author>Mark Pollack</author>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Connection.SingleConnectionFactory.targetConnection">
            <summary>
            Raw Rabbit Connection
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Connection.SingleConnectionFactory.connection">
            <summary>
            Proxy Connection
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Connection.SingleConnectionFactory.connectionMonitor">
            <summary>
            Synchronization monitor for the shared Connection
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.SingleConnectionFactory.#ctor(RabbitMQ.Client.ConnectionFactory,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Messaging.Amqp.Rabbit.Connection.CachingConnectionFactory"/> class.
            </summary>
            <param name="connectionFactory">The connection factory.</param>
            <param name="hostName">The host.</param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.SingleConnectionFactory.InitConnection">
            <summary>
            Initialize the underlying shared Connection. Closes and reinitializes the Connection if an underlying
            Connection is present already.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.SingleConnectionFactory.Dispose">
            <summary>
            Close the underlying shared connection.
            </summary>
            <remarks>
            The provider of this ConnectionFactory needs to care for proper shutdown.
            As this bean implements IDisposable, the application context will
            automatically invoke this on destruction of its cached singletons.
            </remarks>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.SingleConnectionFactory.CloseConnection(RabbitMQ.Client.IConnection)">
            <summary>
            Closes the given connection.
            </summary>
            <param name="con">The connection.</param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.SingleConnectionFactory.GetSharedConnection(RabbitMQ.Client.IConnection)">
            <summary>
            Wrap the given Connection with a proxy that delegates every method call to it
            but suppresses close calls. This is useful for allowing application code to
            handle a special framework Connection just like an ordinary Connection from a
            ConnectionFactory.
            </summary>
            <param name="target">The original connection to wrap.</param>
            <returns>the wrapped connection</returns>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Listener.SimpleMessageListenerContainer">
            <summary>
             
            </summary>
            <author>Mark Pollack</author>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.SimpleMessageListenerContainer.DoInitialize">
            <summary>
            Creates the specified number of concurrent consumers, in the from of a Rabbit Channel
            plus associated MessageConsumer
            process.
            </summary>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Listener.SimpleMessageListenerContainer.ConcurrentConsumers">
            <summary>
            Sets the number of concurrent consumers to create.  Default is 1.
            </summary>
            <remarks>
            Raising the number of concurrent consumers is recommended in order
            to scale the consumption of messages coming in from a queue. However,
            note that any ordering guarantees are lost once multiple consumers are
            registered. In general, stick with 1 consumer for low-volume queues.
            </remarks>
            <value>The concurrent consumers.</value>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Core.Support.RabbitGatewaySupport">
            <summary>
            Convenient super class for application classes that need Rabbit access.
            </summary>
            <remarks>
             Requires a ConnectionFactory or a RabbitTemplate instance to be set.
             It will create its own RabbitTemplate if a ConnectionFactory is passed in.
             A custom RabbitTemplate instance can be created for a given ConnectionFactory
             through overriding the <code>createNmsTemplate</code> method.
            </remarks>
            <author>Mark Pollack</author>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.Support.RabbitGatewaySupport.CreateRabbitTemplate(Spring.Messaging.Amqp.Rabbit.Connection.IConnectionFactory)">
             <summary>
             Creates a RabbitTemplate for the given ConnectionFactory.
             </summary>
             <remarks>Only invoked if populating the gateway with a ConnectionFactory reference.
             Can be overridden in subclasses to provide a different RabbitTemplate instance
             </remarks>
            
             <param name="connectionFactory">The connection factory.</param>
             <returns></returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.Support.RabbitGatewaySupport.AfterPropertiesSet">
            <summary>
            Ensures that the Rabbit Template is specified and calls <see cref="M:Spring.Messaging.Amqp.Rabbit.Core.Support.RabbitGatewaySupport.InitGateway"/>.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.Support.RabbitGatewaySupport.InitGateway">
            <summary>
            Subclasses can override this for custom initialization behavior.
            Gets called after population of this instance's properties.
            </summary>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Core.Support.RabbitGatewaySupport.RabbitTemplate">
            <summary>
            Gets or sets the Rabbit template for the gateway.
            </summary>
            <value>The Tabbity template.</value>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Core.Support.RabbitGatewaySupport.ConnectionFactory">
            <summary>
            Gets or sets he NMS connection factory to be used by the gateway.
            Will automatically create a NmsTemplate for the given ConnectionFactory.
            </summary>
            <value>The connection factory.</value>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Listener.BlockingQueueConsumer">
            <summary>
             
            </summary>
            <author>Mark Pollack</author>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Core.RabbitTemplate">
            <summary>
            Helper class that simplifies synchronous RabbitMQ access code. 
            </summary>
            <author>Mark Pollack</author>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Core.RabbitTemplate.queue">
            <summary>
            The default queue name that will be used for synchronous receives.
            </summary>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Connection.IResourceFactory">
            <summary>
             
            </summary>
            <author>Mark Pollack</author>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.RabbitTemplate.RabbitTemplateResourceFactory.#ctor(Spring.Messaging.Amqp.Rabbit.Core.RabbitTemplate)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Core.RabbitMessagePropertiesFactory">
            <summary>
            Simple implementation of <see cref="T:Spring.Messaging.Amqp.Core.IMessagePropertiesFactory"/> interface.
            </summary>
            <author>Mark Pollack</author>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Connection.CachingConnectionFactory">
            <summary>
            
            </summary>
            <author>Mark Pollack</author>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.CachingConnectionFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.CachingConnectionFactory.#ctor(RabbitMQ.Client.ConnectionFactory,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Messaging.Amqp.Rabbit.Connection.CachingConnectionFactory"/> class.
            </summary>
            <param name="connectionFactory">The connection factory.</param>
            <param name="address">The address.</param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.CachingConnectionFactory.GetCachedModelWrapper(RabbitMQ.Client.IModel,System.Collections.Generic.LinkedList{RabbitMQ.Client.IModel})">
            <summary>
            Wraps the given Model so that it delegates every method call to the target model but
            adapts close calls. This is useful for allowing application code to
            handle a special framework Model just like an ordinary Model.
            </summary>
            <param name="targetModel">The original Model to wrap.</param>
            <param name="modelList">The List of cached Model that the given Model belongs to.</param>
            <returns>The wrapped Model</returns>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Core.RabbitAdmin">
            <summary>
            RabbitMQ implementation of portable AMQP administrative operations for AMQP >= 0.8
            </summary>
            <author>Mark Pollack</author>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.RabbitAdmin.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Messaging.Amqp.Rabbit.Core.RabbitAdmin"/> class.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.RabbitAdmin.#ctor(Spring.Messaging.Amqp.Rabbit.Connection.IConnectionFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Messaging.Amqp.Rabbit.Core.RabbitAdmin"/> class.
            </summary>
            <param name="connectionFactory">The connection factory.</param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.RabbitAdmin.#ctor(Spring.Messaging.Amqp.Rabbit.Core.RabbitTemplate)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Messaging.Amqp.Rabbit.Core.RabbitAdmin"/> class.
            </summary>
            <param name="rabbitTemplate">The rabbit template.</param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.RabbitAdmin.DeclareExchange(Spring.Messaging.Amqp.Core.IExchange)">
            <summary>
            Declares the exchange.
            </summary>
            <param name="exchange">The exchange.</param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.RabbitAdmin.DeleteExchange(System.String)">
            <summary>
            Deletes the exchange.
            </summary>
            <remarks>
            Look at implementation specific subclass for implementation specific behavior, for example
            for RabbitMQ this will delete the exchange without regard for whether it is in use or not.
            </remarks>
            <param name="exchangeName">Name of the exchange.</param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.RabbitAdmin.DeclareQueue">
            <summary>
            Declares the queue.
            </summary>
            <param name="queue">The queue.</param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.RabbitAdmin.DeclareQueue(Spring.Messaging.Amqp.Core.Queue)">
            <summary>
            Declares the queue.
            </summary>
            <param name="queue">The queue.</param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.RabbitAdmin.DeleteQueue(System.String)">
            <summary>
            Deletes the queue, without regard for whether it is in use or has messages on it 
            </summary>
            <param name="queueName">Name of the queue.</param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.RabbitAdmin.DeleteQueue(System.String,System.Boolean,System.Boolean)">
            <summary>
            Deletes the queue.
            </summary>
            <param name="queueName">Name of the queue.</param>
            <param name="unused">if set to <c>true</c> the queue should be deleted only if not in use.</param>
            <param name="empty">if set to <c>true</c> the queue should be deleted only if empty.</param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.RabbitAdmin.PurgeQueue(System.String,System.Boolean)">
            <summary>
            Purges the queue.
            </summary>
            <param name="queueName">Name of the queue.</param>
            <param name="noWait">if set to <c>true</c> [no wait].</param>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Connection.CachedModel">
            <summary>
             
            </summary>
            <author>Mark Pollack</author>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Connection.CachedModel.TargetModel">
            <summary>
            Gets the target, for testing purposes.
            </summary>
            <value>The target.</value>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Support.RabbitUtils">
            <summary>
             
            </summary>
            <author>Mark Pollack</author>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Support.RabbitUtils.CloseConnection(RabbitMQ.Client.IConnection)">
            <summary>
            Closes the given Rabbit Connection and ignore any thrown exception.
            </summary>
            <remarks>This is useful for typical 'finally' blocks in manual Rabbit
            code</remarks>
            <param name="connection">The connection to close (may be nul).</param>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Listener.LocallyExposedRabbitResourceHolder">
            <summary>
             
            </summary>
            <author>Mark Pollack</author>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Connection.RabbitResourceHolder">
            <summary>
             
            </summary>
            <author>Mark Pollack</author>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.ListenerExecutionFailedException">
            <summary>
            Exception to be thrown when the execution of a listener method failed.
            </summary>
            <author>Juergen Hoeller</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.ListenerExecutionFailedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.ListenerExecutionFailedException"/> class, with the specified message
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.ListenerExecutionFailedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.ListenerExecutionFailedException"/> class, with the specified message
            and root cause exception
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Core.MessageProperties">
            <summary>
            Rabbit implementation that stores much of the message property information in Rabbit's 
            <see cref="T:RabbitMQ.Client.IBasicProperties"/> class.  Also contains static strings for various content types.
            </summary>
            <note>Headers will be created on demand if they are null in the underlying IBasicProperties instance.</note>
            <author>Mark Pollack</author>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.MessageProperties.#ctor(RabbitMQ.Client.IBasicProperties)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Listener.SharedConnectionNotInitializedException">
            <summary>
            Exception that indicates that the initial setup of this container's
            shared Connection failed. This is indicating to invokers that they need
            to establish the shared Connection themselves on first access.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.SharedConnectionNotInitializedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Messaging.Amqp.Rabbit.Listener.SharedConnectionNotInitializedException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
    </members>
</doc>
